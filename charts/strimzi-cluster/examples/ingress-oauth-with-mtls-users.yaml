# This file is part of Strimzi Cluster Helm Chart <https://github.com/StevenJDH/helm-charts>.
# Copyright (C) 2025 Steven Jenkins De Haro.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

kafka:
  listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    - name: tls
      port: 9094
      type: internal
      tls: true
      authentication:
        type: tls
      configuration:
        useServiceDnsDomain: true
    - name: oauth
      port: 9198
      type: ingress
      tls: true
      authentication:
        type: oauth
        validIssuerUri: http://my-keycloak.keycloak.svc.cluster.local/realms/strimzi
        jwksEndpointUri: http://my-keycloak.keycloak.svc.cluster.local/realms/strimzi/protocol/openid-connect/certs
        userNameClaim: preferred_username
        maxSecondsWithoutReauthentication: 3600
        enableMetrics: true
        # An additional check that can be used to control who in the realm has access to Kafka.
        # customClaimCheck: "'kafka-user' in @.realm_access.roles"
        disableTlsHostnameVerification: false
        # Trusted certificates for TLS connection to the Keycloak server when accessing
        # external Keycloak Urls that use https and not signed by trusted CA.
        # tlsTrustedCertificates:
        # - secretName: keycloak-tls
        #   certificate: tls.crt
      configuration:
        class: nginx
        hostTemplate: oauth-broker-{nodeId}.myingress.com
        bootstrap:
          host: oauth-bootstrap.myingress.com
        # Clients need to trust CA extracted with below command or specify a custom cert chain
        # as per below commented out section.
        # openssl s_client -connect oauth-broker-0.myingress.com:443 -servername oauth-broker-0.myingress.com -showcerts
        # kubectl get secret <cluster-name>-cluster-ca-cert -o jsonpath='{.data.ca\.crt}' -n strimzi | base64 -d > ca.crt
        # brokerCertChainAndKey:
        #   # kubectl create secret tls my-tls-secret --cert=path/to/tls.crt --key=path/to/tls.key -n strimzi
        #   secretName: my-tls-secret
        #   certificate: tls.crt
        #   key: tls.key

  authorization:
    # For a complete authorization example, import the following into Keycloak and adjust as needed:
    # https://raw.githubusercontent.com/strimzi/strimzi-kafka-operator/refs/heads/main/examples/security/keycloak-authorization/kafka-authz-realm.json
    type: keycloak
    clientId: kafka
    tokenEndpointUri: http://my-keycloak.keycloak.svc.cluster.local/realms/strimzi/protocol/openid-connect/token
    # Trusted certificates for TLS connection to the Keycloak server when accessing
    # external Keycloak Urls that use https and not signed by trusted CA.
    # tlsTrustedCertificates:
    # - secretName: keycloak-tls
    #   certificate: tls.crt
    disableTlsHostnameVerification: false
    # Whether authorization decision should be delegated to the 'Simple' authorizer
    # if DENIED by Keycloak Authorization Services policies. Default value is false.
    # Set as true to support both OAuth and mTLS users.
    delegateToKafkaAcls: true
    enableMetrics: true
    superUsers:
    - service-account-kafka
    - CN=test-user
    # Increase grantsRefreshPeriodSeconds to reduce load on Keycloak server.
    grantsRefreshPeriodSeconds: 60
    grantsRefreshPoolSize: 5
    grantsGcPeriodSeconds: 300
    grantsMaxIdleTimeSeconds: 300
    grantsAlwaysLatest: false
    connectTimeoutSeconds: 60
    readTimeoutSeconds: 60
    httpRetries: 3
