{{/*
This file is part of Strimzi Cluster <https://github.com/StevenJDH/helm-charts>.
Copyright (C) 2025 Steven Jenkins De Haro.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{- if ((.Values.schemaregistry).enabled) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: schemaregistry-overlay-config
  labels:
    strimzi.io/cluster: {{ include "shared-library.fullname" . }}
    {{- include "shared-library.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
data:
  pod-template.yaml: |
    spec:
      template:
        spec:
          initContainers:
          - name: wait-for-client-cert
            image: busybox:latest
            imagePullPolicy: IfNotPresent
            command: ["/bin/sh", "-c"]
            args:
              - |
                echo -e "Starting preflight checks...\n"
                while [[ ! -f /mnt/secrets/client-auth/user.crt ]]; do
                  echo "Waiting for client cert file to be available..."
                  sleep 5
                done
                echo "Client cert file found."
            volumeMounts:
              - mountPath: /mnt/secrets/client-auth
                name: client-auth-volume
                readOnly: true
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  annotations:
    platform.confluent.io/pod-overlay-configmap-name: schemaregistry-overlay-config
  labels:
    strimzi.io/cluster: {{ include "shared-library.fullname" . }}
    {{- include "shared-library.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  configOverrides:
    server:
      - config.providers=file,dir
      - config.providers.file.class=org.apache.kafka.common.config.provider.FileConfigProvider
      - config.providers.dir.class=org.apache.kafka.common.config.provider.DirectoryConfigProvider
      - kafkastore.ssl.keystore.password=${dir:/mnt/secrets/client-auth:user.password}
      - kafkastore.ssl.key.password=${dir:/mnt/secrets/client-auth:user.password}
      - kafkastore.ssl.keystore.location=/mnt/secrets/client-auth/user.p12
      - kafkastore.ssl.truststore.password=${dir:/mnt/secrets/cluster-ca:ca.password}
      - kafkastore.ssl.truststore.location=/mnt/secrets/cluster-ca/ca.p12
      - kafkastore.topic=_schemas_schemaregistry_{{ .Release.Namespace }}
      - kafkastore.topic.replication.factor=3
      - listeners=https://0.0.0.0:{{ .Values.schemaregistry.service.port }}
      - metrics.jmx.prefix=schemaregistry_{{ .Release.Namespace }}
      - schema.registry.group.id=id_schemaregistry_{{ .Release.Namespace }}
  dependencies:
    kafka:
      bootstrapEndpoint: {{ include "shared-library.fullname" . }}-kafka-bootstrap.{{ .Release.Namespace }}.svc.cluster.local:9094
      authentication:
        type: mtls
      tls:
        enabled: true
  tls:
    autoGeneratedCerts: {{ .Values.schemaregistry.managedCerts.enabled }}
    secretRef: schemaregistry-tls
  image:
    application: confluentinc/cp-schema-registry:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  mountedVolumes:
    volumeMounts:
      - mountPath: /mnt/secrets/client-auth
        name: client-auth-volume
        readOnly: true
      - mountPath: /mnt/secrets/cluster-ca
        name: cluster-ca-volume
        readOnly: true
    volumes:
      - name: client-auth-volume
        secret:
          secretName: schemaregistry  
      - name: cluster-ca-volume
        secret:
          secretName: strimzi-cluster-cluster-ca-cert
  metrics:
    tls:
      enabled: false
    prometheus:
      whitelist:
        - kafka.schema.registry:type=jetty-metrics
        - kafka.schema.registry:type=master-slave-role
        - kafka.schema.registry:type=jersey-metrics
      rules:
        - pattern: 'kafka.schema.registry<type=jetty-metrics>([^:]+):'
          name: "cp_kafka_schema_registry_jetty_metrics_$1"
        - pattern: 'kafka.schema.registry<type=master-slave-role>([^:]+):'
          name: "cp_kafka_schema_registry_master_slave_role"
        - pattern: 'kafka.schema.registry<type=jersey-metrics>([^:]+):'
          name: "cp_kafka_schema_registry_jersey_metrics_$1"
{{- end -}}