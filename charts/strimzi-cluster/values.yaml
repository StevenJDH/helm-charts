# This file is part of Strimzi Cluster Helm Chart <https://github.com/StevenJDH/helm-charts>.
# Copyright (C) 2025 Steven Jenkins De Haro.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -- Override for chart name in helm common labels.
nameOverride: ""
# -- Override for generated resource names.
fullnameOverride: ""

kafka:
  version: 3.9.0
  annotations: {}
  labels: {}
  config:
    offsets.topic.replication.factor: 3
    transaction.state.log.replication.factor: 3
    transaction.state.log.min.isr: 2
    default.replication.factor: 3
    min.insync.replicas: 2
    # It is recommended that auto.create.topics.enable is set to 'false' to avoid races between the operator and Kafka applications auto-creating topics.
    auto.create.topics.enable: "false"
  logging: {}
    # type: inline
    # loggers:
    #   kafka.root.logger.level: "INFO"
    #   log4j.logger.kafka.request.logger: "WARN"
    #   log4j.logger.kafka.authorizer.logger: "WARN"

  listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    - name: tls
      port: 9093
      type: internal
      tls: true
      authentication:
        type: tls
  authorization:
    type: simple
  certificates:
    clusterCa:
      # -- If `true`, then Certificate Authority certificates will be generated automatically. Otherwise,
      # a Secret needs to be provided with the CA certificate. Note: Setting this to `false` requires
      # several steps for manually managing custom certificates and renewals.
      # Reference: https://strimzi.io/docs/operators/0.45.0/full/deploying.html#security-using-your-own-certificates-str.
      generateCertificateAuthority: true
      # -- The number of days generated certificates should be valid for.
      validityDays: 365
      # -- The number of days in the certificate renewal period. This is the number of days before the a
      # certificate expires during which renewal actions may be performed. When generateCertificateAuthority
      # is `true`, this will cause the generation of a new certificate, and this will cause extra logging
      # at WARN level about the pending certificate expiry.
      renewalDays: 30
      # -- If `true`, the Cluster and Client CA Secrets are configured with the ownerReference set to the
      # Kafka resource. If the Kafka resource is deleted, the CA Secrets are also deleted. If `false`,
      # the ownerReference is disabled. If the Kafka resource is deleted, the CA Secrets are retained and
      # available for reuse.
      generateSecretOwnerReference: true
    clientsCa:
      generateCertificateAuthority: true
      validityDays: 365
      renewalDays: 30
      generateSecretOwnerReference: true
  entityOperator:
    template:
      pod: {}
    topicOperator: {}
      # resources:
      #   requests:
      #     memory: "256Mi"
      #     cpu: "100m"
      #   limits:
      #     memory: "512Mi"
      #     cpu: "500m"
    userOperator: {}
      # resources:
      #   requests:
      #     memory: "256Mi"
      #     cpu: "100m"
      #   limits:
      #     memory: "512Mi"
      #     cpu: "500m"

  # -- cruiseControl deploys the Cruise Control component to optimize Kafka when specified. Being present
  # and not null is enough to enable it. It will also enable `kafka.metricsEnabled` by default and configure
  # metrics for cruise control, so no need to configure here (e.g., `kafka.cruiseControl.metricsConfig`).
  # Reference: https://strimzi.io/docs/operators/0.45.0/configuring.html#type-CruiseControlSpec-reference.
  cruiseControl: {}
    # template:
    #   pod: {}
    # resources: {}

  # -- Indicates whether or not to enable the JMX Prometheus Exporter metrics for Kafka.
  # This is enabled by default if `kafka.cruiseControl` is present.
  metricsEnabled: true
  # -- kafkaExporter allows to customize the configuration of the Kafka Exporter.
  # Reference: https://strimzi.io/docs/operators/0.45.0/configuring.html#type-KafkaExporterSpec-reference
  kafkaExporter: {}
    # topicRegex: ".*"
    # groupRegex: ".*"
    # topicExcludeRegex: ""
    # groupExcludeRegex: ""
    # template:
    #   pod: {}
    # resources: {}

  nodeSelector: {}
  affinity: {}
  tolerations: []

cruiseControlRebalance:
  # -- Indicates whether or not to create a KafkaRebalance resource with an empty spec to use
  # the default goals from the Cruise Control configuration for optimizing the cluster workloads.
  create: true
  annotations:
    # -- Triggers the rebalance directly without any further approval step (e.g.,
    # setting `strimzi.io/rebalance=approve` when the `PROPOSALREADY` column is `TRUE`).
    # Use `strimzi.io/rebalance=refresh` to trigger a new analysis.
    strimzi.io/rebalance-auto-approval: "true"
  labels: {}

nodePools:
  broker:
    enabled: true
    nameOverride: ""
    annotations: {}
      # strimzi.io/next-node-ids: "[0-10]"

    labels: {}
    replicas: 3
    roles:
      - broker
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: 1Gi
          deleteClaim: false
          # @ignored.
          kraftMetadata: shared
          class: default
    jvmOptions: {}
      # -Xms: 4096m
      # -Xmx: 4096m

    resources: {}
  kraft-controller:
    enabled: true
    nameOverride: ""
    annotations: {}
      # strimzi.io/next-node-ids: "[11-20]"

    labels: {}
    replicas: 3
    roles:
      - controller
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: 1Gi
          deleteClaim: false
          # @ignored. Indicates that this directory will be used to store the KRaft metadata log.
          kraftMetadata: shared
          class: default
    jvmOptions: {}
    resources: {}
  dual-role-pool:
    enabled: false
    nameOverride: ""
    annotations: {}
    labels: {}
    replicas: 3
    roles:
      - controller
      - broker
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: 1Gi
          deleteClaim: false
          # @ignored.
          kraftMetadata: shared
          class: default
    jvmOptions: {}
    resources: {}

strimzi-kafka-operator:
  # -- Indicates whether or not to deploy Strimzi with the Kafka cluster.
  enabled: true
  # -- replicas is for the number of cluster operator instances.
  replicas: 1
  resources: {}
    # limits:
    #   memory: 384Mi
    #   cpu: 1000m
    # requests:
    #   memory: 384Mi
    #   cpu: 200m

strimzi-drain-cleaner:
  # -- Indicates whether or not to deploy Drain Cleaner with the Kafka cluster.
  enabled: true
  # -- replicaCount is for the number of Drain Cleaner instances.
  replicaCount: 1
  # @ignored. Indicates whether the Certificate and Issuer custom resources should be created.
  certManager:
    create: false
  secret:
    create: true
    tls_crt: ""
    tls_key: ""
    # -- ca_bundle is the CA certificate bundle in PEM format used for the ValidatingWebhookConfiguration
    # truststore regardless of the `strimzi-drain-cleaner.secret.create` state.
    ca_bundle: ""
  namespace:
    create: true
    # -- name is the name of the namespace where the Drain Cleaner resources will be deployed, but also,
    # it's used for RBAC permissions regardless of the `strimzi-drain-cleaner.namespace.create` state.
    name: strimzi-drain-cleaner
  resources: {}
