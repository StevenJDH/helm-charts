{{/*
This file is part of Shared Library Helm Chart <https://github.com/StevenJDH/helm-charts>.
Copyright (C) 2023-2024 Steven Jenkins De Haro.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/}}

{{/*
Generates a NOTES output with useful information for a helm chart.

Usage:
{{- include "shared-library.notes" . }}

Params:
  - context - Dict - Required. The context for the template evaluation.
*/}}

{{- define "shared-library.notes" -}}
You have deployed the following release: {{ .Release.Name }}.

To get further information, you can run the commands:
  $ helm status {{ .Release.Name }} -n {{ .Release.Namespace }}
  $ helm get all {{ .Release.Name }} -n {{ .Release.Namespace }}

{{ if ((.Values.service).type) -}}
Get the application URL by running these commands:
{{- if contains "NodePort" ((.Values.service).type | default "") }}
  $ export NODE_PORT=$(kubectl get svc {{ include "shared-library.fullname" . }}-svc --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}")
  $ export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  $ echo "Visit http://$NODE_IP:$NODE_PORT to access the application."
{{- else if contains "LoadBalancer" ((.Values.service).type | default "") }}
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        You can watch the status of by running 'kubectl get svc {{ include "shared-library.fullname" . }}-svc --namespace {{ .Release.Namespace }} -w'
  $ export SERVICE_IP=$(kubectl get svc {{ include "shared-library.fullname" . }}-svc --namespace {{ .Release.Namespace }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  $ echo "Visit http://$SERVICE_IP:{{ .Values.service.port }} to access the application."
{{- else if contains "ClusterIP" ((.Values.service).type | default "") }}
  $ export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "shared-library.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  $ export CONTAINER_PORT=$(kubectl get pod $POD_NAME --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  $ kubectl port-forward $POD_NAME 8080:$CONTAINER_PORT --namespace {{ .Release.Namespace }}
  $ echo "Visit http://127.0.0.1:8080 to access the application."
{{- end }}
{{- end }}

{{ if ((.Values.ingress).enabled) -}}
Ingress URL(s):
{{- range $hosts := .Values.ingress.hosts }}
  {{- range .paths }}
  {{- if $hosts.host }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $hosts.host }}{{ .path }}
  {{- else }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://*{{ .path }}
  {{- end }}
  {{- end }} 
{{- end }}

If TLS is enabled for the Ingress, a Secret containing the certificate and key must be provided in one way or another, for example:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: example
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls
{{- end }}
{{- end -}}