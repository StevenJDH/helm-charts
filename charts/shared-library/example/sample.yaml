---
# Source: example/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: example
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  policyTypes:
    - Ingress
    - Egress
  podSelector:
    matchLabels:
      app.kubernetes.io/name: example
      app.kubernetes.io/instance: example
  ingress:
  - {}
  egress:
  - {}
---
# Source: example/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: example
  annotations:
    eks.amazonaws.com/audience: "sts.amazonaws.com"
    eks.amazonaws.com/role-arn: ""
    eks.amazonaws.com/sts-regional-endpoints: "true"
    eks.amazonaws.com/token-expiration: "86400"
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
---
# Source: example/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: example-secret
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
type: Opaque
data:
  PASSWORD_EXAMPLE: c3dvcmRmaXNo
---
# Source: example/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: example-config
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
data:
  CONFIG_EXAMPLE: "test"
---
# Source: example/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-svc
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  type: ClusterIP
  sessionAffinity: None
  ipFamilyPolicy: SingleStack
  ipFamilies: 
    - IPv4
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
      appProtocol: http
  selector:
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
---
# Source: example/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example
  annotations:
    rollme: "LH0t4"
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: example
      app.kubernetes.io/instance: example
  template:
    metadata:
      labels:
        app.kubernetes.io/name: example
        app.kubernetes.io/instance: example
    spec:
      serviceAccountName: example
      securityContext:
        runAsNonRoot: true
        runAsUser: 10101
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: example
          image: "nginx:1.25.1"
          imagePullPolicy: Always
          ports:
            - name: actuator
              containerPort: 8081
              protocol: TCP
            - name: http
              containerPort: 8080
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: false
          envFrom:
          - configMapRef:
              name: example-config
          - secretRef:
              name: example-secret
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /actuator/health/liveness
              port: actuator
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health/readiness
              port: actuator
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            {}
      restartPolicy: Always
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: example/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: example-job
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  completions: 1
  backoffLimit: 20
  activeDeadlineSeconds: 120
  template:
    metadata:
      name: example-job
      labels:
        helm.sh/chart: example-0.1.0
        app.kubernetes.io/name: example
        app.kubernetes.io/instance: example
        app.kubernetes.io/version: "1.25.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: example
      securityContext:
        {}
      containers:
        - name: example-job
          image: "busybox:latest"
          imagePullPolicy: Always
          securityContext:
            {}
          resources:
            {}
      restartPolicy: Never
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: example/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: example
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  jobTemplate:
    metadata:
      labels:
        helm.sh/chart: example-0.1.0
        app.kubernetes.io/name: example
        app.kubernetes.io/instance: example
        app.kubernetes.io/version: "1.25.1"
        app.kubernetes.io/managed-by: Helm
    spec:
      completions: 1
      backoffLimit: 0
      activeDeadlineSeconds: 120
      template:
        metadata:
          labels:
            helm.sh/chart: example-0.1.0
            app.kubernetes.io/name: example
            app.kubernetes.io/instance: example
            app.kubernetes.io/version: "1.25.1"
            app.kubernetes.io/managed-by: Helm
        spec:
          securityContext:
            {}
          containers:
          - name: example-job
            image: "busybox:latest"
            imagePullPolicy: Always
            securityContext:
              {}
            envFrom:
            - configMapRef:
                name: example-config
            - secretRef:
                name: example-secret
            resources:
              {}
          restartPolicy: Never
          nodeSelector:
            kubernetes.io/os: linux
  schedule: '0 8 * * *'
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
---
# Source: example/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: example-ingress
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
  namespace: default
spec:
  ingressClassName: nginx
  rules:
    - host: ""
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: example-svc
                port:
                  number: 80
---
# Source: example/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "example-test-connection"
  annotations:
    "helm.sh/hook": test
  labels:
    helm.sh/chart: example-0.1.0
    app.kubernetes.io/name: example
    app.kubernetes.io/instance: example
    app.kubernetes.io/version: "1.25.1"
    app.kubernetes.io/managed-by: Helm
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['example-svc:80']
  restartPolicy: Never
