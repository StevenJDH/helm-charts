# This file is part of Konga Helm Chart <https://github.com/StevenJDH/helm-charts>.
# Copyright (C) 2023 Steven Jenkins De Haro.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# -- replicaCount is the number of pod instances created by the Deployment owned ReplicaSet to
# increase availability when set to more than one.
replicaCount: 1

image:
  # -- repository holding the Konga container image.
  repository: pantsel/konga
  # -- pullPolicy is the strategy for pulling images from a registry.
  pullPolicy: Always
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullSecret:
    # @ignored. registry is the private docker container registry for pulling images.
    registry: "index.docker.io/v1/"
    # -- username is the Docker username associated with the password.
    username: ""
    # -- password is the Docker password associated with the username with pull rights.
    password: ""

# -- Override for chart name in helm common labels.
nameOverride: ""
# -- Override for generated resource names.
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: false
  # -- annotations to add to the service account.
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

# -- annotations to be added to the Deployment resource.
annotations: {}

# -- podAnnotations are the annotations to be added to the deployment pods.
podAnnotations: {}

# -- The update strategy to apply to the Deployment resource.
updateStrategy: {}
#  rollingUpdate:
#    maxUnavailable: 1
#  type: RollingUpdate

# -- Additional command line arguments to pass to the container.
extraArgs: []
#  - --arg1
#  - value1
#  - --arg2
#  - value2

# -- Additional environment variables to set.
extraEnvs: []
#  - name: FOO
#    valueFrom:
#      secretKeyRef:
#        key: FOO
#        name: secret-resource

# @ignored
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 100
  seccompProfile:
    type: RuntimeDefault

# @ignored
securityContext:
  # readOnlyRootFilesystem: true causes 'WebServerException: Unable to create tempDir', so fixed using tmp volume mount.
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL

# -- containerPort is the port or ports that the container listens on.
containerPorts:
  http: 1337

# @ignored. Startup, Liveness and readiness probes. Reference [Configure Liveness, Readiness and Startup Probes](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes).
# Liveness probes do not wait for readiness probes to succeed. If you want to wait before
# executing a liveness probe you should use initialDelaySeconds or a startupProbe.
health:
  startupProbe: {}
  #  httpGet:
  #    path: /
  #    port: http
  #    scheme: HTTP
  #  initialDelaySeconds: 5
  #  periodSeconds: 5
  #  timeoutSeconds: 2
  #  successThreshold: 1
  #  failureThreshold: 5
  livenessProbe:
    httpGet:
      path: /
      port: http
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    httpGet:
      path: /
      port: http
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 3

# -- Additional volumeMounts for the main container.
extraVolumeMounts: []
#  - name: example-volume
#    mountPath: /share/example

# -- Additional volumes for the pod.
extraVolumes: []
#  - name: example-volume
#    emptyDir: {}

# -- Containers, which are run before the app containers are started.
extraInitContainers: []
#  - name: init-myservice
#    image: busybox
#    command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']

service:
  # -- type specifies what kind of Service resource to create.
  type: ClusterIP
  # @ignored
  port: 80
  # @ignored
  targetPort: 1337
  # @ignored
  nodePort: 32080
  # -- appProtocol overrides annotations in a service resource that were used for setting a backend protocol. In AWS for example,
  # `service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http`. See the following GitHub issue for more details
  # [kubernetes/kubernetes#40244](https://github.com/kubernetes/kubernetes/issues/40244). Will be ignored for Kubernetes versions
  # older than 1.20.
  appProtocol: true
  # -- annotations to add to the service resource.
  annotations: {}
  # -- clusterIP allows for customizing the cluster IP address of a service resource.
  clusterIP: ""
  # -- externalIPs is a list of IP addresses at which a service is available at. Reference [External IPs](https://kubernetes.io/docs/user-guide/services/#external-ips).
  externalIPs: []
  # -- loadBalancerIP is a field used by cloud providers to connect the resulting `LoadBalancer` created by a service resource to a
  # pre-existing static IP. Reference [Type LoadBalancer](https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer).
  # This field is deprecated as of Kubernetes 1.24.0 since it doesn't support dual-stack, but there is no replacement as of yet. Most likely
  # cloud providers will adopt a provider specific annotation approach for this. Progress can be tracked here [kubernetes/enhancements#1992](https://github.com/kubernetes/enhancements/pull/1992).
  loadBalancerIP: ""
  # -- loadBalancerSourceRanges is a list of one or more internal or external IP address ranges. If not set, a Service will accept
  # traffic from any IP address (0.0.0.0/0).
  loadBalancerSourceRanges: []
  # -- externalTrafficPolicy is an annotation set on a service resource. It defines how traffic incoming to a node is load balanced.
  # `Cluster` is normally the default policy, but `Local` is often used to preserve the source IP of traffic coming into a cluster
  # node. With Local, requests are load balanced equally across nodes irrespective of how many pods are on each node. When set to
  # Cluster, both nodes and pods are taken into consideration. Applicable only when `service.type` is `NodePort` or `LoadBalancer`.
  # Reference [Preserving the client source IP](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip).
  externalTrafficPolicy: ""
  # -- sessionAffinity ensures that connections from a particular client are passed to the same Pod each time based on the client's
  # IP address. Must be either "None" or "ClientIP" if set. Reference [User space proxy mode](https://kubernetes.io/docs/concepts/services-networking/service/#proxy-mode-userspace)
  sessionAffinity: "None"
  # -- healthCheckNodePort specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,
  # the service controller allocates a port from your cluster’s NodePort range. Reference [Preserving the client source IP](https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip).
  healthCheckNodePort: 0
  # -- ipFamilyPolicy represents the dual-stack-ness requested or required by this Service. Possible values are SingleStack, PreferDualStack or RequireDualStack.
  # The ipFamilies and clusterIPs fields depend on the value of this field. Reference [IPv4/IPv6 dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack)
  ipFamilyPolicy: "SingleStack"
  # -- ipFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to a service. This field is usually assigned automatically
  # based on cluster configuration and the ipFamilyPolicy field. [IPv4/IPv6 dual-stack](https://kubernetes.io/docs/concepts/services-networking/dual-stack)
  ipFamilies:
  - IPv4

ingress:
  # -- Indicates whether or not an Ingress resource is created.
  enabled: true
  # -- className is the name of the Ingress class.
  className: nginx
  # -- annotations to add to the Ingress resource.
  annotations: {}
  #  kubernetes.io/ingress.class: nginx
  #  kubernetes.io/tls-acme: "true"
  hosts:
    # -- host is the hostname of a request that must match exactly or use a wildcard as the subdomain.
    - host: ""
      paths:
          # -- path is part of a list of one or more paths that are associated with a backend service.
        - path: /
          # -- pathType is a field that can specify how Ingress paths should be matched.
          # Reference [Path types](https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types).
          pathType: Prefix
  # -- tls is a list of hosts that needs to explicitly match the host in the rules section.
  # It also contains a secret with references to tls.crt and tls.key to use for TLS.
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #    - chart-example.local

# --  Optionally request and limit how much CPU and memory (RAM) the container needs.
# Reference [Resource Management for Pods and Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers).
resources: {}
#  We usually recommend not to specify default resources and to leave this as a conscious
#  choice for the user. This also increases chances charts run on environments with little
#  resources, such as Minikube. If you do want to specify resources, uncomment the following
#  lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#  requests:
#    memory: 256Mi
#    cpu: 500m
#  limits:
#    memory: 512Mi
#    cpu: 1000m

migrations:
  # -- Indicates whether or not to run DB migrations when configMap.dbAdapter is set to `mysql` or `postgres` because
  # this isn't done automatically when configMap.nodeEnv is set to `production`.
  enabled: true
  # -- annotations to add to the DB migrations Job resource.
  annotations: {}
  # --  Optionally request and limit how much CPU and memory (RAM) the container needs.
  # Reference [Resource Management for Pods and Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers).
  resources: {}
  #  requests:
  #    memory: 256Mi
  #    cpu: 500m
  #  limits:
  #    memory: 512Mi
  #    cpu: 1000m
  job:
    # -- podAnnotations are the annotations to be added to the job pods.
    podAnnotations: {}
    # @ignored
    restartPolicy: Never
    # @ignored
    completions: 1
    # @ignored
    backoffLimit: 20
    # @ignored
    activeDeadlineSeconds: 120

configMap:
  # -- The port that will be used by Konga's server. Must be aligned with `containerPorts.http` and `service.targetPort`.
  port: "1337"
  # -- The environment. Valid values are `development` and `production`.
  nodeEnv: "development"
  # -- If SSL is needed, this will be the absolute path to the .key file. Both sslKeyPath & sslCrtPath must be set.
  sslKeyPath: ""
  # -- If SSL is needed, this will be the absolute path to the .key file. Both sslKeyPath & sslCrtPath must be set. 
  sslCrtPath: ""
  # -- The time in ms that Konga will wait for startup tasks to finish before exiting the process.
  kongaHookTimeout: "60000"
  # -- The database that Konga will use. If not set, the localDisk db will be used. Valid values are `mongo`, `mysql`, and `postgres`.
  dbAdapter: "postgres"
  # -- The full db connection string. Depends on dbAdapter. If this is set, no other DB related var is needed.
  dbUri: ""
  # -- If dbUri is not specified, this is the database host. Depends on dbAdapter.
  dbHost: "localhost"
  # -- If dbUri is not specified, this is the database port. Depends on dbAdapter.
  dbPort: "5432"
  # -- If dbUri is not specified, this is the database user. Depends on dbAdapter.
  dbUser: ""
  # -- If dbUri is not specified, this is the name of Konga's db. Depends on dbAdapter.
  dbDatabase: "konga_database"
  # -- If using postgres as a database, this is the schema that will be used.
  dbPgSchema: "public"
  # -- The logging level. Valid values are `silly`, `debug`, `info`, `warn`, and `error`. Set as `debug` if nodeEnv is set to `development`, otherwise, set as `warn` for production.
  kongaLogLevel: "debug"
  # -- Run Konga without Authentication.
  noAuth: "false"
  # -- Define a base URL or relative path that Konga will be loaded from. Ex: www.example.com/konga.
  baseUrl: ""
  # -- Seed default Kong Admin API connections on first run. See [Docs](https://hub.docker.com/r/pantsel/docs/SEED_DEFAULT_DATA.md) for more information.
  kongaSeedKongNodeDataSourceFile: ""
  # -- Seed default users on first run. See [Docs](https://hub.docker.com/r/pantsel/docs/SEED_DEFAULT_DATA.md) for more information.
  kongaSeedUserDataSourceFile: ""
  # -- Defines what authentication provider to use. Valid values are `local` and `ldap`.
  kongaAuthProvider: "local"
  # -- The location of the LDAP server.
  kongaLdapHost: "ldap://localhost:389"
  # -- The DN that the konga should use to login to LDAP to search users.
  kongaLdapBindDn: ""
  # -- The base DN used to search for users.
  kongaLdapUserSearchBase: "ou=users,dc=com"
  # -- The filter expression used to search for users. Use {{username}} where you expect the username to be.
  # @default -- (\|(uid={{username}})(sAMAccountName={{username}}))
  kongaLdapUserSearchFilter: "(|(uid={{username}})(sAMAccountName={{username}}))"
  # -- Comma separated list of attributes to pull from the LDAP server for users.
  kongaLdapUserAttrs: "uid,uidNumber,givenName,sn,mail"
  # -- The base DN used to search for groups.
  kongaLdapGroupSearchBase: "ou=groups,dc=com"
  # -- The filter expression used to search for groups. Use {{some-attr}} where you expect a user attribute to be or {{dn}} for the user dn.
  # @default -- (\|(memberUid={{uid}})(memberUid={{uidNumber}})(sAMAccountName={{uid}}))
  kongaLdapGroupSearchFilter: "(|(memberUid={{uid}})(memberUid={{uidNumber}})(sAMAccountName={{uid}}))"
  # -- Comma separated list of attributes to pull from the LDAP server for groups.
  kongaLdapGroupAttrs: "cn"
  # -- Regular expression used to determine if a group should be considered as an admin user.
  # @default -- \^(admin\|konga)$
  kongaAdminGroupReg: "^(admin|konga)$"
  # -- LDAP attribute name that should be used as the konga username.
  kongaLdapAttrUsername: "uid"
  # -- LDAP attribute name that should be used as the konga user's first name.
  kongaLdapAttrFirstname: "givenName"
  # -- LDAP attribute name that should be used as the konga user's last name.
  kongaLdapAttrLastname: "sn"
  # -- LDAP attribute name that should be used as the konga user's email address.
  kongaLdapAttrEmail: "mail"

secrets:
  # -- If dbUri is not specified, this is the database user's password. Depends on dbAdapter.
  dbPassword: ""
  # -- The secret that will be used to sign JWT tokens issued by Konga.
  tokenSecret: ""
  # -- The password for the user konga will use to search for users.
  kongaLdapBindPassword: ""

# -- nodeSelector is the simplest way to constrain Pods to nodes with specific labels. Use affinity for more advance options. Reference [Assigning Pods to Nodes](https://kubernetes.io/docs/user-guide/node-selection).
nodeSelector:
  kubernetes.io/os: linux

# -- affinity for pod scheduling. Reference [Assign Pods to Nodes using Node Affinity](https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes-using-node-affinity).
affinity: {}
#  podAntiAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#    - labelSelector:
#        matchExpressions:
#        - key: app
#          operator: In
#          values:
#          - app-name
#      topologyKey: "kubernetes.io/hostname"

# -- tolerations allow the scheduler to schedule pods onto nodes with matching taints. Reference [Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration).
tolerations: []
#  - key: "key"
#    operator: "Equal|Exists"
#    value: "value"
#    effect: "NoSchedule|PreferNoSchedule|NoExecute"

autoscaling:
  # -- Indicates whether or not a Horizontal Pod Autoscaling resource is created. Enabling is ignored if KEDA is enabled.
  enabled: false
  # -- minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.
  minReplicas: 1
  # --  maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up.
  # It cannot be less that minReplicas.
  maxReplicas: 10
  # -- targetCPUUtilizationPercentage represents the percentage of requested CPU over all the pods.
  targetCPUUtilizationPercentage: 80
  # -- targetMemoryUtilizationPercentage represents the percentage of requested memory over all the pods.
  targetMemoryUtilizationPercentage: 80
  # -- template provides custom or additional autoscaling metrics that are not built in to Kubernetes
  # or any Kubernetes component. Reference [Scaling on custom metrics](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#scaling-on-custom-metrics).
  template: []
  # - type: Pods
  #   pods:
  #     metric:
  #       name: example_app_process_requests_total
  #     target:
  #       type: AverageValue
  #       averageValue: 10000m

  # -- behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
  behavior: {}
  # scaleDown:
  #   stabilizationWindowSeconds: 300
  #   policies:
  #   - type: Pods
  #     value: 1
  #     periodSeconds: 180
  # scaleUp:
  #   stabilizationWindowSeconds: 300
  #   policies:
  #   - type: Pods
  #     value: 2
  #     periodSeconds: 60

keda:
  # -- apiVersion is the KEDA API to use, which will be either `keda.k8s.io/v1alpha1` or `keda.sh/v1alpha1` depending on
  # whether KEDA is version 1x or 2x respectively.
  apiVersion: "keda.sh/v1alpha1"
  # -- Indicates whether or not a KEDA ScaleObject resource is created. Enabling this
  # prevents a Horizontal Pod Autoscaling resource from being created.
  enabled: false
  # -- minReplicas is the minimum number of replicas KEDA will scale a target resource down to.
  minReplicas: 1
  # -- maxReplicas is the maximum number of replicas KEDA will scale a target resource up to.
  maxReplicas: 10
  # -- pollingInterval is the interval to check each trigger on.
  pollingInterval: 30
  # -- cooldownPeriod is the period to wait after the last trigger reported active before
  # scaling the resource back to 0.
  cooldownPeriod: 300
  # -- restoreToOriginalReplicaCount specifies whether the target resource (Deployment, StatefulSet,…)
  # should be scaled back to original replicas count, after the ScaledObject is deleted. Default behavior
  # is to keep the replica count at the same number as it is in the moment of ScaledObject's deletion.
  restoreToOriginalReplicaCount: false
  scaledObject:
    # -- annotations to add to the ScaledObject resource.
    annotations: {}
    #  key: value

  # -- triggers is a list of triggers to activate scaling on for a target resource.
  triggers: []
  #  - type: prometheus
  #    metadata:
  #      serverAddress: http://<prometheus-host>:9090
  #      metricName: http_requests_total
  #      threshold: '100'
  #      query: sum(rate(http_requests_total{deployment="my-deployment"}[2m]))

  # -- behavior is used to modify HPA's scaling behavior for the HPA definition that KEDA will create
  # for a given resource.
  behavior: {}
  #  scaleDown:
  #    stabilizationWindowSeconds: 300
  #    policies:
  #    - type: Pods
  #      value: 1
  #      periodSeconds: 180
  #  scaleUp:
  #    stabilizationWindowSeconds: 300
  #    policies:
  #    - type: Pods
  #      value: 2
  #      periodSeconds: 60

kong:
  # -- Indicates whether or not to deploy Kong with Konga.
  enabled: false
  # -- Number of Kong replicas.
  replicaCount: 2
  # @ignored
  nameOverride: "kong"
  # @ignored
  fullnameOverride: "kong"
  # @ignored
  postgresql:
    nameOverride: "postgresql"
    fullnameOverride: "kong-postgresql"
  # @ignored
  cassandra:
    nameOverride: "cassandra"
    fullnameOverride: "kong-cassandra"
  ingressController:
    # -- Indicates whether or not to deploy the Kong Ingress Controller
    enabled: true
  metrics:
    # -- Indicates whether or not to enable the export of Prometheus metrics.
    enabled: false